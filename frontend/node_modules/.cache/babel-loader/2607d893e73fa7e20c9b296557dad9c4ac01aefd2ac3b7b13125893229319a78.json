{"ast":null,"code":"var _jsxFileName = \"/Users/josephjuarez/Documents/Dev/jja/notifications-code-challenge/gila-front/src/components/paginated-table/PaginatedTable.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport AutorenewOutlinedIcon from \"@mui/icons-material/AutorenewOutlined\";\nimport TablePagination from '@mui/material/TablePagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaginatedTable = () => {\n  _s();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [totalCount, setTotalCount] = useState(0);\n  const fetchData = async (page, pageSize) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:8080/api/messages/by-notification?notificationId=1&page=${page}&pageSize=${pageSize}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const responseData = await response.json();\n      setError(null);\n      return responseData;\n    } catch (error) {\n      setError(\"Error fetching data\");\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const handleRefresh = async () => {\n    const response = await fetchData(page + 1, rowsPerPage); // Increment page by 1\n    console.log('responseeee', response);\n    setData(response.messages);\n    setTotalCount(response.totalCount); // Update totalCount\n  };\n\n  useEffect(() => {\n    handleRefresh();\n  }, [page, rowsPerPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"listContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Latest broadcasts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row last-refresh-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12 text-end\",\n        children: /*#__PURE__*/_jsxDEV(AutorenewOutlinedIcon, {\n          className: \"refresh-icon\",\n          onClick: handleRefresh\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      className: \"my-table\",\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Channel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"User Id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"User Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Sent time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: data.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: row.channel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: row.userId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: row.userEmail\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: row.sentTime.toDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n        rowsPerPageOptions: [10],\n        component: \"div\",\n        count: totalCount // Total number of items, replace with actual count\n        ,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        onPageChange: handlePageChange,\n        onRowsPerPageChange: handleRowsPerPageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(PaginatedTable, \"/OJMwT5eYreCxmk1otQ+aPuyiCo=\");\n_c = PaginatedTable;\nexport default PaginatedTable;\nvar _c;\n$RefreshReg$(_c, \"PaginatedTable\");","map":{"version":3,"names":["React","useState","useEffect","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","AutorenewOutlinedIcon","TablePagination","jsxDEV","_jsxDEV","PaginatedTable","_s","page","setPage","rowsPerPage","setRowsPerPage","data","setData","loading","setLoading","error","setError","totalCount","setTotalCount","fetchData","pageSize","response","fetch","ok","Error","responseData","json","handlePageChange","event","newPage","handleRowsPerPageChange","parseInt","target","value","handleRefresh","console","log","messages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","component","sx","minWidth","map","row","index","channel","userId","userEmail","sentTime","toDateString","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","_c","$RefreshReg$"],"sources":["/Users/josephjuarez/Documents/Dev/jja/notifications-code-challenge/gila-front/src/components/paginated-table/PaginatedTable.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport AutorenewOutlinedIcon from \"@mui/icons-material/AutorenewOutlined\";\nimport TablePagination from '@mui/material/TablePagination';\n\ninterface RowData {\n  channel: string;\n  userEmail: string;\n  userId: number;\n  sentTime: Date\n}\n\nconst PaginatedTable: React.FC = () => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [data, setData] = useState<RowData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const fetchData = async (page: number, pageSize: number): Promise<RowData[]> => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:8080/api/messages/by-notification?notificationId=1&page=${page}&pageSize=${pageSize}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const responseData = await response.json();\n      setError(null);\n      return responseData;\n    } catch (error) {\n      setError(\"Error fetching data\");\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePageChange = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleRefresh = async () => {\n    const response: any = await fetchData(page + 1, rowsPerPage); // Increment page by 1\n    console.log('responseeee', response);\n    setData(response.messages);\n    setTotalCount(response.totalCount); // Update totalCount\n  };\n\n  useEffect(() => {\n    handleRefresh();\n  }, [page, rowsPerPage]);\n\n  return (\n    <div className=\"listContainer\">\n      <h1>Latest broadcasts</h1>\n      <div className=\"row last-refresh-container\">\n        <div className=\"col-md-12 text-end\">\n          <AutorenewOutlinedIcon className=\"refresh-icon\" onClick={handleRefresh} />\n        </div>\n      </div>\n      <TableContainer component={Paper} className=\"my-table\">\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Channel</TableCell>\n              <TableCell>User Id</TableCell>\n              <TableCell>User Email</TableCell>\n              <TableCell>Sent time</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.map((row, index) => (\n              <TableRow key={index}>\n                <TableCell>{row.channel}</TableCell>\n                <TableCell>{row.userId}</TableCell>\n                <TableCell>{row.userEmail}</TableCell>\n                <TableCell>{row.sentTime.toDateString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TablePagination\n          rowsPerPageOptions={[10]}\n          component=\"div\"\n          count={totalCount} // Total number of items, replace with actual count\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handlePageChange}\n          onRowsPerPageChange={handleRowsPerPageChange}\n        />\n      </TableContainer>\n    </div>\n  );\n}\n\nexport default PaginatedTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}