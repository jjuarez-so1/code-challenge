{"ast":null,"code":"var _jsxFileName = \"/Users/josephjuarez/Documents/Dev/jja/notifications-code-challenge/gila-front/src/pages/logs/Logs.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PaginatedTable from '../../components/paginated-table/PaginatedTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logs = () => {\n  _s();\n  const [data, setData] = useState([]); // Specify the type of state\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchData = async (page, pageSize) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/messages/by-notification?notificationId=1&page=${page}&pageSize=${pageSize}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const responseData = await response.json();\n      setError(null);\n      return responseData; // Return fetched data\n    } catch (error) {\n      setError(\"Error fetching data\");\n      return []; // Return empty array in case of error\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData(1, 10).then(fetchedData => setData(fetchedData)); // Initial fetch when component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logs\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logsContainer\",\n      children: /*#__PURE__*/_jsxDEV(PaginatedTable, {\n        data: data,\n        loading: loading,\n        error: error,\n        fetchData: fetchData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n};\n_s(Logs, \"35twu9BzPwh/MvC4fPenfNnsuzs=\");\n_c = Logs;\nexport default Logs;\nvar _c;\n$RefreshReg$(_c, \"Logs\");","map":{"version":3,"names":["React","useEffect","useState","PaginatedTable","jsxDEV","_jsxDEV","Logs","_s","data","setData","loading","setLoading","error","setError","fetchData","page","pageSize","response","fetch","ok","Error","responseData","json","then","fetchedData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/josephjuarez/Documents/Dev/jja/notifications-code-challenge/gila-front/src/pages/logs/Logs.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PaginatedTable from '../../components/paginated-table/PaginatedTable'\n\ninterface RowData {\n    id: number;\n    channel: string;\n    userEmail: string;\n  }\n  \n  interface PaginatedTableProps {\n    data: RowData[];\n    loading: boolean;\n    error: string | null;\n    fetchData: (page: number, pageSize: number) => Promise<RowData[]>; // Update the return type\n  }\n  \n  const Logs = () => {\n    const [data, setData] = useState<RowData[]>([]); // Specify the type of state\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n  \n    const fetchData = async (page: number, pageSize: number): Promise<RowData[]> => {\n      setLoading(true);\n      try {\n        const response = await fetch(`/api/messages/by-notification?notificationId=1&page=${page}&pageSize=${pageSize}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const responseData = await response.json();\n        setError(null);\n        return responseData; // Return fetched data\n      } catch (error) {\n        setError(\"Error fetching data\");\n        return []; // Return empty array in case of error\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    useEffect(() => {\n      fetchData(1, 10).then((fetchedData) => setData(fetchedData)); // Initial fetch when component mounts\n    }, []);\n  \n    return (\n      <div className='logs'>\n        <div className=\"logsContainer\">\n          <PaginatedTable\n            data={data}\n            loading={loading}\n            error={error}\n            fetchData={fetchData}\n          />\n        </div>\n      </div>\n    );\n  }\n  \n  export default Logs;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,iDAAiD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAe1E,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAY,EAAE,CAAC,CAAC,CAAC;EACjD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMY,SAAS,GAAG,MAAAA,CAAOC,IAAY,EAAEC,QAAgB,KAAyB;IAC9EL,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,uDAAsDH,IAAK,aAAYC,QAAS,EAAC,CAAC;MAChH,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAC1CT,QAAQ,CAAC,IAAI,CAAC;MACd,OAAOQ,YAAY,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,QAAQ,CAAC,qBAAqB,CAAC;MAC/B,OAAO,EAAE,CAAC,CAAC;IACb,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACda,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAACS,IAAI,CAAEC,WAAW,IAAKf,OAAO,CAACe,WAAW,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnB,OAAA;IAAKoB,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBrB,OAAA;MAAKoB,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5BrB,OAAA,CAACF,cAAc;QACbK,IAAI,EAAEA,IAAK;QACXE,OAAO,EAAEA,OAAQ;QACjBE,KAAK,EAAEA,KAAM;QACbE,SAAS,EAAEA;MAAU;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAAvB,EAAA,CAvCKD,IAAI;AAAAyB,EAAA,GAAJzB,IAAI;AAyCV,eAAeA,IAAI;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}